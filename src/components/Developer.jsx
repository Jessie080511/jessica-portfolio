/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 developer.glb -T 
Files: developer.glb [981.62KB] > /Users/hsuwinlat/Desktop/jsm pj/threejscc-portfolio/public/models/developer-transformed.glb [395.08KB] (60%)
*/

import React, { useEffect, useRef } from 'react';
import { useGraph } from '@react-three/fiber';
import { useAnimations, useGLTF } from '@react-three/drei';
import { SkeletonUtils } from 'three-stdlib';

const Developer = ({ animationName = 'idle', ...props }) => {
  const group = useRef();

  // ✅ 1. 确保 GLB 文件路径正确
  const { scene, animations } = useGLTF('/models/animations/model.glb');  
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);

  // ✅ 2. 确保动画加载成功
  const { actions } = useAnimations(animations, group);
  
  // ✅ 3. 防止动画 undefined 出错
  useEffect(() => {
    if (actions[animationName]) {
      actions[animationName].reset().fadeIn(0.5).play();
      return () => actions[animationName].fadeOut(0.5);
    } else {
      console.warn(`⚠️ No animation found for "${animationName}"`);
    }
  }, [animationName]);

  // ✅ 4. Debug: 打印 nodes 确保模型正确加载
  console.log("GLB Nodes:", nodes);
  console.log("GLB Materials:", materials);

  return (
    <group ref={group} {...props} dispose={null}>
      <primitive object={nodes.Hips} />
      
      {/* ✅ 自动绑定 GLB 角色的 Mesh */}
      {Object.keys(nodes).map((key) => (
        <skinnedMesh
          key={key}
          name={key}
          geometry={nodes[key].geometry}
          material={materials[key]}
          skeleton={nodes[key].skeleton}
          morphTargetDictionary={nodes[key].morphTargetDictionary}
          morphTargetInfluences={nodes[key].morphTargetInfluences}
        />
      ))}
    </group>
  );
};

useGLTF.preload('/models/animations/model.glb');

export default Developer;

